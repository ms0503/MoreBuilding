import com.modrinth.minotaur.dependencies.DependencyType
import com.modrinth.minotaur.dependencies.ModDependency
import com.modrinth.minotaur.dependencies.VersionDependency

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
    }
}

plugins {
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.modrinth.minotaur' version '2.+'
    id 'dev.architectury.loom' version '1.3-SNAPSHOT' apply false
    id 'idea'
    id 'java'
}

apply plugin: 'nebula-aggregate-javadocs'

base {
    archivesName = archives_base_name
}

version = "${version}+${minecraft_version}"
group = maven_group

println('##############################')
println('# More Building Version Info #')
println('##############################')
println("More Building     : ${version}")
println("Minecraft         : ${minecraft_version}")
println("Fabric Loader     : ${fabric_loader_version}")
println("Fabric API        : ${fabric_api_version}")
println("MinecraftForge    : ${forge_version}")
println("NeoForge          : ${neoforge_version}")
println("Quilt Loader      : ${quilt_loader_version}")
println("Quilted Fabric API: ${quilt_api_version}")
println("Architectury      : ${architectury_version}")
println("Cloth Config API  : ${cloth_config_version}")
println('##############################')

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
    project {
        languageLevel = '17'
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
    it.options.release.set 17
}

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        maven {
            name = 'Quilt'
            url = 'https://maven.quiltmc.org/repository/release'
        }
        maven {
            name = 'shedaniel'
            url = 'https://maven.shedaniel.me'
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings "org.quiltmc:quilt-mappings:1.20.1+build.23:intermediary-v2"
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    def commonJar = project(':morebuilding-common').remapJar
    def fabricJar = project(':morebuilding-fabric').remapJar
    def forgeJar = project(':morebuilding-forge').remapJar
    def neoForgeJar = project(':morebuilding-neoforge').remapJar
    def quiltJar = project(':morebuilding-quilt').remapJar
    dependsOn commonJar, fabricJar, forgeJar, neoForgeJar, quiltJar
    from commonJar.archiveFile.map {
        zipTree(it)
    }
    from fabricJar.archiveFile.map {
        zipTree(it)
    }
    from forgeJar.archiveFile.map {
        zipTree(it)
    }
    from neoForgeJar.archiveFile.map {
        zipTree(it)
    }
    from quiltJar.archiveFile.map {
        zipTree(it)
    }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    manifest {
        attributes([
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Implementation-Title'    : project.name,
            'Implementation-Vendor'   : 'Sora Tonami',
            'Implementation-Version'  : project.jar.archiveVersion,
            'Specification-Title'     : mod_id,
            'Specification-Vendor'    : 'Sora Tonami',
            'Specification-Version'   : '1'
        ])
    }
}

tasks.named('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    def commonSources = project(':morebuilding-common').sourcesJar
    def fabricSources = project(':morebuilding-fabric').sourcesJar
    def forgeSources = project(':morebuilding-forge').sourcesJar
    def neoForgeSources = project(':morebuilding-neoforge').sourcesJar
    def quiltSources = project(':morebuilding-quilt').sourcesJar
    dependsOn commonSources, fabricSources, forgeSources, neoForgeSources, quiltSources
    from commonSources.archiveFile.map {
        zipTree(it)
    }
    from fabricSources.archiveFile.map {
        zipTree(it)
    }
    from forgeSources.archiveFile.map {
        zipTree(it)
    }
    from neoForgeSources.archiveFile.map {
        zipTree(it)
    }
    from quiltSources.archiveFile.map {
        zipTree(it)
    }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}

tasks.named('javadocJar', Jar) {
    dependsOn tasks.aggregateJavadocs
}

tasks.modrinth.dependsOn.addAll tasks.clean, tasks.build

modrinth {
    changelog = project.file('CHANGELOG.md').text
    debugMode = false
    dependencies.addAll([
        new ModDependency('P7dR8mSH', DependencyType.REQUIRED),                 // Fabric API
        new ModDependency('qvIfYCYJ', DependencyType.REQUIRED),                 // QFAPI/QSL
        new VersionDependency('lhGA9TYQ', 'Sbew3kXe', DependencyType.REQUIRED), // Architectury API (Fabric)
        new VersionDependency('lhGA9TYQ', 'gyJ7kDpb', DependencyType.REQUIRED), // Architectury API (Forge)
        new VersionDependency('9s6osm5g', 's7VTKfLA', DependencyType.REQUIRED), // Cloth Config API (Fabric)
        new VersionDependency('9s6osm5g', 'JoLgnJ0G', DependencyType.REQUIRED)  // Cloth Config API (Forge)
    ])
    gameVersions.add minecraft_version
    loaders.addAll 'fabric', 'forge', 'neoforge', 'quilt'
    projectId = modrinth_project_id
    syncBodyFrom = project.file('README.md').text
    token = System.getenv 'MODRINTH_TOKEN'
    uploadFile = jar
    versionName = "v${version}"
    versionNumber.set version as String
    versionType = 'alpha'
}
