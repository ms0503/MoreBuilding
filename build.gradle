import com.modrinth.minotaur.dependencies.DependencyType
import com.modrinth.minotaur.dependencies.ModDependency
import com.modrinth.minotaur.dependencies.VersionDependency
import net.fabricmc.loom.task.RemapJarTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
    }
}

plugins {
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.modrinth.minotaur' version '2.+'
    id 'dev.architectury.loom' version '1.3-SNAPSHOT' apply false
    id 'idea'
    id 'io.github.juuxel.loom-vineflower' version '1.+' apply false
    id 'java'
}

apply plugin: 'nebula-aggregate-javadocs'

base {
    archivesName = archives_base_name
}

version = "${version}+${libs.minecraft.get().version}"
group = maven_group

println '##############################'
println '# More Building Version Info #'
println '##############################'
println "More Building        : ${version}"
println "Minecraft            : ${libs.minecraft.get().version}"
println "Fabric Loader        : ${libs.fabric.loader.get().version}"
println "Fabric API           : ${libs.fabric.api.get().version}"
println "MinecraftForge       : ${libs.forge.get().version}"
println "NeoForge             : ${libs.neoforge.get().version}"
println "Forgified Fabric API : ${libs.forgified.fabric.api.get().version}"
println "Quilt Loader         : ${libs.quilt.loader.get().version}"
println "Quilted Fabric API   : ${libs.quilt.api.get().version}"
println "Architectury         : ${libs.architectury.asProvider().get().version}"
println "Cloth Config API     : ${libs.cloth.asProvider().get().version}"
println "Mod Menu             : ${libs.modmenu.get().version}"
println '##############################'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
    project {
        languageLevel = '17'
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
    it.options.release.set 17
}

architectury {
    minecraft = libs.minecraft.get().version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'io.github.juuxel.loom-vineflower'

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        maven {
            name = 'Quilt'
            url = 'https://maven.quiltmc.org/repository/release'
        }
        maven {
            name = 'shedaniel'
            url = 'https://maven.shedaniel.me'
        }
    }

    dependencies {
        minecraft libs.minecraft
        mappings variantOf(libs.quilt.mapping) {
            classifier 'intermediary-v2'
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    RemapJarTask commonJar = project(':morebuilding-common').remapJar
    RemapJarTask fabricJar = project(':morebuilding-fabric').remapJar
    RemapJarTask neoForgeJar = project(':morebuilding-neoforge').remapJar
    RemapJarTask quiltJar = project(':morebuilding-quilt').remapJar
    dependsOn commonJar, fabricJar, neoForgeJar, quiltJar
    from commonJar.archiveFile.map {
        zipTree(it)
    }
    from fabricJar.archiveFile.map {
        zipTree(it)
    }
    from neoForgeJar.archiveFile.map {
        zipTree(it)
    }
    from quiltJar.archiveFile.map {
        zipTree(it)
    }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    manifest {
        attributes([
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Implementation-Title'    : project.name,
            'Implementation-Vendor'   : 'Sora Tonami',
            'Implementation-Version'  : project.jar.archiveVersion,
            'Specification-Title'     : mod_id,
            'Specification-Vendor'    : 'Sora Tonami',
            'Specification-Version'   : '1'
        ])
    }
}

tasks.named('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    Jar commonSources = project(':morebuilding-common').sourcesJar
    Jar fabricSources = project(':morebuilding-fabric').sourcesJar
    Jar neoForgeSources = project(':morebuilding-neoforge').sourcesJar
    Jar quiltSources = project(':morebuilding-quilt').sourcesJar
    dependsOn commonSources, fabricSources, neoForgeSources, quiltSources
    from commonSources.archiveFile.map {
        zipTree(it)
    }
    from fabricSources.archiveFile.map {
        zipTree(it)
    }
    from neoForgeSources.archiveFile.map {
        zipTree(it)
    }
    from quiltSources.archiveFile.map {
        zipTree(it)
    }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}

tasks.named('javadocJar', Jar) {
    dependsOn tasks.aggregateJavadocs
}

tasks.modrinth.dependsOn.add tasks.build

modrinth {
    changelog = project.file('CHANGELOG.md').text
    debugMode = false
    dependencies.addAll([
        new ModDependency('P7dR8mSH', DependencyType.REQUIRED),                 // Fabric API
        new ModDependency('qvIfYCYJ', DependencyType.REQUIRED),                 // QFAPI/QSL
        new ModDependency('mOgUt4GM', DependencyType.OPTIONAL),                 // Mod Menu
        new VersionDependency('lhGA9TYQ', 'Sbew3kXe', DependencyType.REQUIRED), // Architectury API (Fabric)
        new VersionDependency('lhGA9TYQ', 'gyJ7kDpb', DependencyType.REQUIRED), // Architectury API (Forge)
        new VersionDependency('9s6osm5g', 's7VTKfLA', DependencyType.REQUIRED), // Cloth Config API (Fabric)
        new VersionDependency('9s6osm5g', 'JoLgnJ0G', DependencyType.REQUIRED)  // Cloth Config API (Forge)
    ])
    gameVersions.add libs.minecraft.get().version
    loaders.addAll 'fabric', 'neoforge', 'quilt'
    projectId = modrinth_project_id
    syncBodyFrom = project.file('README.md').text
    token = System.getenv 'MODRINTH_TOKEN'
    uploadFile = jar
    versionName = "v${version}-MultiLoader"
    versionNumber.set version as String
    versionType = 'release'
}
